if (to_minimize == "cases"){
tot <- compute_total_cases(df)
} else if (to_minimize == "deaths"){
tot <- compute_total_deaths(df)
}
# return(df)
return(tot)
}
to_minimize <- "deaths"
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = TRUE, control = list(xtol_rel = 1e-8, maxeval = 2000))
vax <- round(optimal_vax$par/N_i * 100, 2)
groups <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+")
test <- data.frame(groups, vax)
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least cases")
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least deaths")
View(test2)
to_minimize <- "cases"
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = TRUE, control = list(xtol_rel = 1e-8, maxeval = 2000))
vax <- round(optimal_vax$par/N_i * 100, 2)
groups <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+")
test <- data.frame(groups, vax)
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least deaths")
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least cases")
optimize_sim = function(vax_vec) {
# INPUT:
#    vax_vector: vector of initial vaccine allocation
# parameters
C       <- C_noschool
u       <- u_constant
v_e     <- v_e_constant
# constants
frac_age<- age_demo
npop    <- pop_total
N       <- N_i
nage    <- num_groups
nu      <- 1/3 # incubation period (E -> I), ref: Davies
gamma   <- 1/5 # recovery period (I -> R), ref: Davies
# Initialize simulation with 1 infected in each age group
I_0    <- rep(1,nage)
E_0    <- rep(0,nage)
R_0    <- rep(0,nage)
S_0    <- N-I_0-vax_vec
V_0    <- vax_vec
inits <- c(S=S_0,E=E_0,I=I_0,R=R_0, V=V_0)
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(beta=u, nu=nu, gamma=gamma, C=C, v_e=v_e)
t <- seq(0,150,1)
df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
if (to_minimize == "cases"){
tot <- compute_total_cases(df)
} else if (to_minimize == "deaths"){
tot <- compute_total_deaths(df)
}
# return(df)
return(tot)
}
to_minimize <- "cases"
ptm <- proc.time()
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = TRUE, control = list(xtol_rel = 1e-8, maxeval = 2000))
proc.time() - ptm
vax <- round(optimal_vax$par/N_i * 100, 2)
groups <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+")
test <- data.frame(groups, vax)
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least cases")
to_minimize <- "deaths"
ptm <- proc.time()
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = TRUE, control = list(xtol_rel = 1e-8, maxeval = 2000))
proc.time() - ptm
vax <- round(optimal_vax$par/N_i * 100, 2)
groups <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+")
test <- data.frame(groups, vax)
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least cases")
optimize_sim = function(vax_vec) {
# INPUT:
#    vax_vector: vector of initial vaccine allocation
# parameters
C       <- C
u       <- u_constant
v_e     <- v_e_constant
# constants
frac_age<- age_demo
npop    <- pop_total
N       <- N_i
nage    <- num_groups
nu      <- 1/3 # incubation period (E -> I), ref: Davies
gamma   <- 1/5 # recovery period (I -> R), ref: Davies
# Initialize simulation with 1 infected in each age group
I_0    <- rep(1,nage)
E_0    <- rep(0,nage)
R_0    <- rep(0,nage)
S_0    <- N-I_0-vax_vec
V_0    <- vax_vec
inits <- c(S=S_0,E=E_0,I=I_0,R=R_0, V=V_0)
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(beta=u, nu=nu, gamma=gamma, C=C, v_e=v_e)
t <- seq(0,150,1)
df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
if (to_minimize == "cases"){
tot <- compute_total_cases(df)
} else if (to_minimize == "deaths"){
tot <- compute_total_deaths(df)
}
# return(df)
return(tot)
}
ptm <- proc.time()
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = TRUE, control = list(xtol_rel = 1e-8, maxeval = 2000))
proc.time() - ptm
# _____________________________________________________________________
# RUN SIM ----
# _____________________________________________________________________
percent_vax <- 0.25
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9) # start with uniform distribution
constraints <- function(x){
# function defining the inequality constraints s.t. constraints >= 0 for all components
h <- numeric(3)
h[1] <- x[1]
h[2] <- x[2]
h[3] <- x[3]
h[4] <- x[4]
h[5] <- x[5]
h[6] <- x[6]
h[7] <- x[7]
h[8] <- x[8]
h[9] <- x[9]
h[10] <- sum(x) - nvax
h[11] <- nvax - sum(x)
return(h)
}
to_minimize <- "cases"
ptm <- proc.time()
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = TRUE, control = list(xtol_rel = 1e-8, maxeval = 2000))
proc.time() - ptm
vax <- round(optimal_vax$par/N_i * 100, 2)
groups <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+")
test <- data.frame(groups, vax)
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least cases")
optimize_sim = function(vax_vec) {
# INPUT:
#    vax_vector: vector of initial vaccine allocation
# parameters
C       <- C
u       <- u_constant
v_e     <- v_e_constant
# constants
frac_age<- age_demo
npop    <- pop_total
N       <- N_i
nage    <- num_groups
nu      <- 1/3 # incubation period (E -> I), ref: Davies
gamma   <- 1/5 # recovery period (I -> R), ref: Davies
# Initialize simulation with 1 infected in each age group
I_0    <- rep(1,nage)
E_0    <- rep(0,nage)
R_0    <- rep(0,nage)
S_0    <- N-I_0-vax_vec
V_0    <- vax_vec
inits <- c(S=S_0,E=E_0,I=I_0,R=R_0, V=V_0)
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(beta=u, nu=nu, gamma=gamma, C=C, v_e=v_e)
t <- seq(0,150,1)
df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
if (to_minimize == "cases"){
tot <- compute_total_cases(df)
} else if (to_minimize == "deaths"){
tot <- compute_total_deaths(df)
}
# return(df)
return(tot)
}
to_minimize <- "cases"
ptm <- proc.time()
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = TRUE, control = list(xtol_rel = 1e-8, maxeval = 2000))
proc.time() - ptm
vax <- round(optimal_vax$par/N_i * 100, 2)
groups <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+")
test <- data.frame(groups, vax)
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least cases")
to_minimize <- "deaths"
ptm <- proc.time()
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = TRUE, control = list(xtol_rel = 1e-8, maxeval = 2000))
proc.time() - ptm
vax <- round(optimal_vax$par/N_i * 100, 2)
groups <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+")
test <- data.frame(groups, vax)
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least deaths")
# _____________________________________________________________________
# RUN SIM ----
# _____________________________________________________________________
percent_vax <- 0.05
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9) # start with uniform distribution
constraints <- function(x){
# function defining the inequality constraints s.t. constraints >= 0 for all components
h <- numeric(3)
h[1] <- x[1]
h[2] <- x[2]
h[3] <- x[3]
h[4] <- x[4]
h[5] <- x[5]
h[6] <- x[6]
h[7] <- x[7]
h[8] <- x[8]
h[9] <- x[9]
h[10] <- sum(x) - nvax
h[11] <- nvax - sum(x)
return(h)
}
to_minimize <- "deaths"
to_minimize <- "cases"
ptm <- proc.time()
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = TRUE, control = list(xtol_rel = 1e-8, maxeval = 2000))
proc.time() - ptm
vax <- round(optimal_vax$par/N_i * 100, 2)
groups <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+")
test <- data.frame(groups, vax)
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least cases")
to_minimize <- "deaths"
ptm <- proc.time()
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = TRUE, control = list(xtol_rel = 1e-8, maxeval = 2000))
proc.time() - ptm
vax <- round(optimal_vax$par/N_i * 100, 2)
groups <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+")
test <- data.frame(groups, vax)
ggplot(test, aes(y=vax, x=groups)) +
geom_bar(position="stack", stat="identity") +
xlab("Age group") +
ylab("Number vaccinated\n(% of age group)")+
ylim(0, 100) +
ggtitle("Optimizing for least deaths")
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df <- data.frame()
to_minimize <- "cases"
ptm <- proc.time()
minimize_cases_df <- data.frame()
for (i in 1:2){
percent_vax <- i/100
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9)
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df[1] <- optimal_vax$par
}
proc.time() - ptm
View(minimize_cases_df)
minimize_cases_df[1] <- 3
minimize_cases_df <- data.frame(matrix(ncol = 9, nrow = 2))
for (i in 1:2){
percent_vax <- i/100
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9)
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df[i] <- optimal_vax$par
}
View(minimize_cases_df)
for (i in 1:2){
percent_vax <- i/100
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9)
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df[i,] <- optimal_vax$par
}
View(minimize_cases_df)
ptm <- proc.time()
minimize_cases_df <- data.frame(matrix(ncol = 9, nrow = 50))
for (i in 1:50){
percent_vax <- i/100
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9)
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df[i,] <- round(optimal_vax$par/N_i * 100, 2)
}
proc.time() - ptm
optimal_vax$value
ptm <- proc.time()
minimize_cases_df <- data.frame(matrix(ncol = 11, nrow = 50))
colnames(minimize_cases_df) <- c("Percent_vax", "0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+", "Percent infected")
for (i in 1:2){
percent_vax <- i/100
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9)
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df[i, 2:10] <- round(optimal_vax$par/N_i * 100, 2)
minimize_cases_df[i,1] <- i
minimize_cases_df[i, 11] <- optimal_vax$value
}
proc.time() - ptm
View(minimize_cases_df)
ptm <- proc.time()
minimize_cases_df <- data.frame(matrix(ncol = 11, nrow = 50))
colnames(minimize_cases_df) <- c("Percent_vax", "0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+", "Percent infected")
for (i in 1:2){
percent_vax <- i/100
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9)
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df[i, 2:10] <- round(optimal_vax$par/N_i * 100, 2)
minimize_cases_df[i,1] <- i
minimize_cases_df[i, 11] <- optimal_vax$value
}
proc.time() - ptm
ptm <- proc.time()
minimize_cases_df <- data.frame(matrix(ncol = 11, nrow = 50))
colnames(minimize_cases_df) <- c("Percent_vax", "0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+", "Percent infected")
for (i in 1:50){
percent_vax <- i/100
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9)
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df[i, 2:10] <- round(optimal_vax$par/N_i * 100, 2)
minimize_cases_df[i,1] <- i
minimize_cases_df[i, 11] <- optimal_vax$value
}
proc.time() - ptm
saveRDS(minimize_cases_df, "optimal_simplemodel_cases.RData")
View(minimize_cases_df)
optimize_sim = function(vax_vec) {
# INPUT:
#    vax_vector: vector of initial vaccine allocation
# parameters
C       <- C_noschool
u       <- u_constant
v_e     <- v_e_constant
# constants
frac_age<- age_demo
npop    <- pop_total
N       <- N_i
nage    <- num_groups
nu      <- 1/3 # incubation period (E -> I), ref: Davies
gamma   <- 1/5 # recovery period (I -> R), ref: Davies
# Initialize simulation with 1 infected in each age group
I_0    <- rep(1,nage)
E_0    <- rep(0,nage)
R_0    <- rep(0,nage)
S_0    <- N-I_0-vax_vec
V_0    <- vax_vec
inits <- c(S=S_0,E=E_0,I=I_0,R=R_0, V=V_0)
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(beta=u, nu=nu, gamma=gamma, C=C, v_e=v_e)
t <- seq(0,150,1)
df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
if (to_minimize == "cases"){
tot <- compute_total_cases(df)
} else if (to_minimize == "deaths"){
tot <- compute_total_deaths(df)
}
# return(df)
return(tot)
}
to_minimize <- "cases"
ptm <- proc.time()
minimize_cases_df <- data.frame(matrix(ncol = 11, nrow = 50))
colnames(minimize_cases_df) <- c("Percent_vax", "0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+", "Percent infected")
for (i in 1:50){
percent_vax <- i/100
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9)
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df[i, 2:10] <- round(optimal_vax$par/N_i * 100, 2)
minimize_cases_df[i,1] <- i
minimize_cases_df[i, 11] <- optimal_vax$value
}
proc.time() - ptm
View(minimize_cases_df)
saveRDS(minimize_cases_df, "optimal_C_noschool_cases.RData")
to_minimize <- "deaths"
ptm <- proc.time()
minimize_cases_df <- data.frame(matrix(ncol = 11, nrow = 50))
colnames(minimize_cases_df) <- c("Percent_vax", "0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+", "Percent infected")
for (i in 1:50){
percent_vax <- i/100
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9)
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df[i, 2:10] <- round(optimal_vax$par/N_i * 100, 2)
minimize_cases_df[i,1] <- i
minimize_cases_df[i, 11] <- optimal_vax$value
}
proc.time() - ptm
5982.47/60
saveRDS(minimize_cases_df, "optimal_C_noschool_deaths.RData")
View(minimize_cases_df)
optimize_sim = function(vax_vec) {
# INPUT:
#    vax_vector: vector of initial vaccine allocation
# parameters
C       <- C
u       <- u_constant
v_e     <- v_e_constant
# constants
frac_age<- age_demo
npop    <- pop_total
N       <- N_i
nage    <- num_groups
nu      <- 1/3 # incubation period (E -> I), ref: Davies
gamma   <- 1/5 # recovery period (I -> R), ref: Davies
# Initialize simulation with 1 infected in each age group
I_0    <- rep(1,nage)
E_0    <- rep(0,nage)
R_0    <- rep(0,nage)
S_0    <- N-I_0-vax_vec
V_0    <- vax_vec
inits <- c(S=S_0,E=E_0,I=I_0,R=R_0, V=V_0)
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(beta=u, nu=nu, gamma=gamma, C=C, v_e=v_e)
t <- seq(0,150,1)
df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
if (to_minimize == "cases"){
tot <- compute_total_cases(df)
} else if (to_minimize == "deaths"){
tot <- compute_total_deaths(df)
}
# return(df)
return(tot)
}
to_minimize <- "deaths"
ptm <- proc.time()
minimize_cases_df <- data.frame(matrix(ncol = 11, nrow = 50))
colnames(minimize_cases_df) <- c("Percent_vax", "0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+", "Percent infected")
for (i in 1:50){
percent_vax <- i/100
nvax <- percent_vax*pop_total
initial_vax <- rep(nvax/num_groups, 9)
optimal_vax <- cobyla(initial_vax, optimize_sim, hin = constraints,
nl.info = FALSE, control = list(xtol_rel = 1e-8, maxeval = 2000))
minimize_cases_df[i, 2:10] <- round(optimal_vax$par/N_i * 100, 2)
minimize_cases_df[i,1] <- i
minimize_cases_df[i, 11] <- optimal_vax$value
}
proc.time() - ptm
View(minimize_cases_df)
saveRDS(minimize_cases_df, "optimal_simplemodel_deaths.RData")
