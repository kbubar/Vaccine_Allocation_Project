#   t <- seq(0,600,1)
#   tfinal <- 600
# }
# else if (strategy == "adults"){
#   t <- seq(0,800,1)
#   tfinal <- 800
# }
t <- seq(0,3200,1)
tfinal <- 3200
df <- as.data.frame(lsoda(inits, t, calculate_derivatives_nontransmissionblocking, parameters))
I_tfinal <- sum(df[(tfinal+1),20:28])
if (I_tfinal > 1){
print("Warning: simulation may not have run long enough")
}
df
}
list_all_ntb      <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, percent_vax = j, strategy = "all", u = u_var)
}
calculate_derivatives_nontransmissionblocking=function(t, x, parameters){
# the parameters in the parameters list are:
#    the probability of transmission on contact, beta
#    the incubation period, nu
#    the recovery period, gamma
#    the contact matrix, C, that is the # contacts per day among age groups
#
# Note that x is a vector of length (#model compartment types)*(#age classes)
# Thus, S, E, I and R are vectors, all of length num_groups
ncompartment <- 8
num_groups <- length(x)/ncompartment
S    <- as.matrix(x[1:num_groups])
E    <- as.matrix(x[(num_groups+1):(2*num_groups)])
I    <- as.matrix(x[(2*num_groups+1):(3*num_groups)])
R    <- as.matrix(x[(3*num_groups+1):(4*num_groups)])
VS    <- as.matrix(x[(4*num_groups+1):(5*num_groups)])
VE    <- as.matrix(x[(5*num_groups+1):(6*num_groups)])
VI    <- as.matrix(x[(6*num_groups+1):(7*num_groups)])
VR    <- as.matrix(x[(7*num_groups+1):(8*num_groups)])
I[I<0] = 0
u <- parameters$beta
C <- parameters$C
d_E <- parameters$nu
d_I <- parameters$gamma
v_e <- parameters$v_e
N = S+E+I+R+VS+VE+VI+VR
dS = -as.matrix(S*u)*(as.matrix(C)%*%as.matrix((I+ VI)/N))
dVS = -as.matrix(VS*u)*(as.matrix(C)%*%as.matrix((I+ VI)/N))
dE = -dS - d_E*as.matrix(E)
dVE = -dVs - d_E*as.matrix(VE)
dI = d_E*as.matrix(E) - d_I*as.matrix(I)
dVI = d_E*as.matrix(VE) - d_I*as.matrix(VI)
dR = +d_I*as.matrix(I)
dVR = +d_I*as.matrix(VI)
out=c(dS,dE,dI,dR,dVS,dVE,dVI,dVR)
list(out)
}
list_all_ntb      <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, percent_vax = j, strategy = "all", u = u_var)
}
calculate_derivatives_nontransmissionblocking=function(t, x, parameters){
# the parameters in the parameters list are:
#    the probability of transmission on contact, beta
#    the incubation period, nu
#    the recovery period, gamma
#    the contact matrix, C, that is the # contacts per day among age groups
#
# Note that x is a vector of length (#model compartment types)*(#age classes)
# Thus, S, E, I and R are vectors, all of length num_groups
ncompartment <- 8
num_groups <- length(x)/ncompartment
S    <- as.matrix(x[1:num_groups])
E    <- as.matrix(x[(num_groups+1):(2*num_groups)])
I    <- as.matrix(x[(2*num_groups+1):(3*num_groups)])
R    <- as.matrix(x[(3*num_groups+1):(4*num_groups)])
VS    <- as.matrix(x[(4*num_groups+1):(5*num_groups)])
VE    <- as.matrix(x[(5*num_groups+1):(6*num_groups)])
VI    <- as.matrix(x[(6*num_groups+1):(7*num_groups)])
VR    <- as.matrix(x[(7*num_groups+1):(8*num_groups)])
I[I<0] = 0
u <- parameters$beta
C <- parameters$C
d_E <- parameters$nu
d_I <- parameters$gamma
v_e <- parameters$v_e
N = S+E+I+R+VS+VE+VI+VR
dS = -as.matrix(S*u)*(as.matrix(C)%*%as.matrix((I+ VI)/N))
dVS = -as.matrix(VS*u)*(as.matrix(C)%*%as.matrix((I+ VI)/N))
dE = -dS - d_E*as.matrix(E)
dVE = -dVS - d_E*as.matrix(VE)
dI = d_E*as.matrix(E) - d_I*as.matrix(I)
dVI = d_E*as.matrix(VE) - d_I*as.matrix(VI)
dR = +d_I*as.matrix(I)
dVR = +d_I*as.matrix(VI)
out=c(dS,dE,dI,dR,dVS,dVE,dVI,dVR)
list(out)
}
list_all_ntb      <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, percent_vax = j, strategy = "all", u = u_var)
}
# * Plot total cases and deaths ----
outcome <- "cases"
plot_over_vax_avail(outcome, "Non-transmission blocking", list_all_ntb, list_kids, list_adults, list_elderly, list_twentyplus)
plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
plot_over_vax_avail(outcome, "Non-transmission blocking", list_all_ntb, list_kids, list_adults, list_elderly, list_twentyplus)
list_all_ntb      <- vector(mode = "list")
list_kids_ntb      <- vector(mode = "list")
list_adults_ntb    <- vector(mode = "list")
list_elderly_ntb   <- vector(mode = "list")
list_twentyplus_ntb  <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, percent_vax = j, strategy = "all", u = u_var)
list_kids_ntb[[paste0(i)]] <- run_sim(C, j, "kids", u_var)
list_adults_ntb[[paste0(i)]] <- run_sim(C, j, "adults", u_var)
list_elderly_ntb[[paste0(i)]] <- run_sim(C, j, "elderly", u_var)
list_twentyplus_ntb[[paste0(i)]] <- run_sim(C, j, "20+", u_var)
}
run_sim_nontransmissionblocking = function(C, percent_vax, strategy, u = u_constant, v_e = v_e_constant, frac_age = age_demo, npop = pop_total, N = N_i, nage = num_groups, sero = sero_none, sero_testing = FALSE){
# Disease Tranmission
nu    <- 1/3 # incubation period (E -> I), ref: Davies
gamma <- 1/5 # recovery period (I -> R), ref: Davies
# _____________________________________________________________________
# INITIAL CONDITIONS ----
# Vaccine strategies distribute proportionally to
#     all: all age groups
#     kids: age groups < 20
#     adults: age groups 20-49
#     elderly: age groups 60+
#     20+: age groups 20+
# _____________________________________________________________________
E_0    <- rep(0,nage)
R_0    <- N * sero
# specify group to vaccinate according to allocation strategy
if (strategy == "no vax"){
V_0 <- rep(0, nage)
} else {
if (strategy == "all"){
groups <- 1:9
} else if (strategy == "kids"){
groups <- 1:2
} else if (strategy == "adults") {
groups <- 3:5
} else if (strategy == "elderly") {
groups <- 7:9
} else if (strategy == "20+") {
groups <- 3:9
}
people_to_vax <- sum(N[groups])
vax_proportion <- rep(0, nage)
vax_proportion[groups] <- N[groups]/people_to_vax
nvax <- percent_vax*npop
vax_distribution <- nvax*vax_proportion
vax_distribution[vax_distribution > N] <- N[vax_distribution > N]
prob_vaccinated <- vax_distribution/N
if (sero_testing == FALSE){
# account for people who were vaccinated and seropositive
V_0    <- vax_distribution - N*prob_vaccinated*sero
#V_0 <- vax_distribution*v_e # all or nothing vaccine
} else if (sero_testing == TRUE){
# assumes everyone vaccinated was seronegative
V_0    <- vax_distribution
temp <- N - R_0
V_0[V_0 > temp] <- temp[V_0 > temp]
}
}
# initial I: 1 in each age group unless everyone is vaccinated and/or sero positive
I_0 <- rep(0, nage)
I_0[(N - R_0 - V_0) > 1] <- 1
S_0 <- N - I_0 - V_0 - R_0
inits <- c(S=S_0,E=E_0,I=I_0,R=R_0, VS=V_0, VE = rep(0,nage), VI = rep(0,nage), VR = rep(0,nage))
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(beta=u, nu=nu, gamma=gamma, C=C, v_e=v_e)
# if (strategy == "no vax" | strategy == "kids" | strategy == "elderly"){
#   t <- seq(0,200,1)
#   tfinal <- 200
# }
# else if (strategy == "all"){
#   t <- seq(0,500,1)
#   tfinal <- 500
# }
# else if (strategy == "20+"){
#   t <- seq(0,600,1)
#   tfinal <- 600
# }
# else if (strategy == "adults"){
#   t <- seq(0,800,1)
#   tfinal <- 800
# }
t <- seq(0,1000,1)
tfinal <- 1000
df <- as.data.frame(lsoda(inits, t, calculate_derivatives_nontransmissionblocking, parameters))
I_tfinal <- sum(df[(tfinal+1),20:28])
if (I_tfinal > 1){
print("Warning: simulation may not have run long enough")
}
df
}
list_all_ntb      <- vector(mode = "list")
list_kids_ntb      <- vector(mode = "list")
list_adults_ntb    <- vector(mode = "list")
list_elderly_ntb   <- vector(mode = "list")
list_twentyplus_ntb  <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, percent_vax = j, strategy = "all", u = u_var)
list_kids_ntb[[paste0(i)]] <- run_sim(C, j, "kids", u_var)
list_adults_ntb[[paste0(i)]] <- run_sim(C, j, "adults", u_var)
list_elderly_ntb[[paste0(i)]] <- run_sim(C, j, "elderly", u_var)
list_twentyplus_ntb[[paste0(i)]] <- run_sim(C, j, "20+", u_var)
}
list_all_ntb      <- vector(mode = "list")
list_kids_ntb      <- vector(mode = "list")
list_adults_ntb    <- vector(mode = "list")
list_elderly_ntb   <- vector(mode = "list")
list_twentyplus_ntb  <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, percent_vax = j, strategy = "all", u = u_var)
list_kids_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "kids", u_var)
list_adults_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "adults", u_var)
list_elderly_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "elderly", u_var)
list_twentyplus_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "20+", u_var)
}
# * Plot total cases and deaths ----
outcome <- "cases"
plot_over_vax_avail(outcome, "Non-transmission blocking", list_all_ntb, list_kids_ntb, list_adults_ntb, list_elderly_ntb, list_twentyplus_ntb)
#u_var     <- c(0.4, 0.38, 0.79, 0.86, 0.8, 0.82, 0.88, 0.74, 0.74)/32.8 # Ref: Davies
u_var     <- c(0.4, 0.38, 0.79, 0.86, 0.8, 0.82, 0.88, 0.74, 0.74)/32.8
R0 <- compute_R0(u_var, C)
country <- "BEL"
C <- readRDS(paste0("C_", country, "_bytens_overall.RData"))
age_demo <- readRDS(paste0("age_demographics_", country,".RData"))
pop_total <- age_demo[10]
age_demo <- age_demo[1:9]
N_i <-  pop_total*age_demo
num_groups <- length(age_demo) # num age groups
#IFR   <- c(0.001, 0.001, 0.007, 0.02, 0.06, 0.2, 0.9, 2.4, 10.1) # Ref: Salje
IFR   <- c(0.001, 0.001, 0.005, 0.02, 0.05, 0.2, 0.7, 1.9, 8.3) # Ref: Salje
IFR   <- IFR/100 # as decimal
# susceptibility with R0 ~ 3 (R0 <- compute_R0(u, C))
u_constant     <- rep(0.022, 9) # constant # 0.02 for US, 0.022 for Belgium
#u_var     <- c(0.4, 0.38, 0.79, 0.86, 0.8, 0.82, 0.88, 0.74, 0.74)/32.8 # Ref: Davies
u_var     <- c(0.4, 0.38, 0.79, 0.86, 0.8, 0.82, 0.88, 0.74, 0.74)/32.8
R0 <- compute_R0(u_var, C)
# vaccine efficacy
v_e_constant <- get_v_e(p = 1, y0 = 1, hinge_age = 50)
v_e_var <- get_v_e(p = 0.5, y0 = 1, hinge_age = 50)
# serology
sero_none <- rep(0, 9) # no prior immunity
sero_belgium <- c(0.052, 0.052, 0.076, 0.055, 0.063, 0.071, 0.038, 0.042, 0.1) # Ref: Herzog
list_all      <- vector(mode = "list")
list_kids     <- vector(mode = "list")
list_adults   <- vector(mode = "list")
list_elderly  <- vector(mode = "list")
list_twentyplus   <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim(C, percent_vax = j, strategy = "all", u = u_var)
list_kids[[paste0(i)]] <- run_sim(C, j, "kids", u_var)
list_adults[[paste0(i)]] <- run_sim(C, j, "adults", u_var)
list_elderly[[paste0(i)]] <- run_sim(C, j, "elderly", u_var)
list_twentyplus[[paste0(i)]] <- run_sim(C, j, "20+", u_var)
}
# * Nontransmission blocking
list_all_ntb      <- vector(mode = "list")
list_kids_ntb      <- vector(mode = "list")
list_adults_ntb    <- vector(mode = "list")
list_elderly_ntb   <- vector(mode = "list")
list_twentyplus_ntb  <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, percent_vax = j, strategy = "all", u = u_var)
list_kids_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "kids", u_var)
list_adults_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "adults", u_var)
list_elderly_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "elderly", u_var)
list_twentyplus_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "20+", u_var)
}
run_sim = function(C, percent_vax, strategy, u = u_constant, v_e = v_e_constant, frac_age = age_demo, npop = pop_total, N = N_i, nage = num_groups, sero = sero_none, sero_testing = FALSE){
# Disease Tranmission
nu    <- 1/3 # incubation period (E -> I), ref: Davies
gamma <- 1/5 # recovery period (I -> R), ref: Davies
# _____________________________________________________________________
# INITIAL CONDITIONS ----
# Vaccine strategies distribute proportionally to
#     all: all age groups
#     kids: age groups < 20
#     adults: age groups 20-49
#     elderly: age groups 60+
#     20+: age groups 20+
# _____________________________________________________________________
E_0    <- rep(0,nage)
R_0    <- N * sero
# specify group to vaccinate according to allocation strategy
if (strategy == "no vax"){
V_0 <- rep(0, nage)
} else {
if (strategy == "all"){
groups <- 1:9
} else if (strategy == "kids"){
groups <- 1:2
} else if (strategy == "adults") {
groups <- 3:5
} else if (strategy == "elderly") {
groups <- 7:9
} else if (strategy == "20+") {
groups <- 3:9
}
people_to_vax <- sum(N[groups])
vax_proportion <- rep(0, nage)
vax_proportion[groups] <- N[groups]/people_to_vax
nvax <- percent_vax*npop
vax_distribution <- nvax*vax_proportion
vax_distribution[vax_distribution > N] <- N[vax_distribution > N]
prob_vaccinated <- vax_distribution/N
if (sero_testing == FALSE){
# account for people who were vaccinated and seropositive
V_0    <- vax_distribution - N*prob_vaccinated*sero
#V_0 <- vax_distribution*v_e # all or nothing vaccine
} else if (sero_testing == TRUE){
# assumes everyone vaccinated was seronegative
V_0    <- vax_distribution
temp <- N - R_0
V_0[V_0 > temp] <- temp[V_0 > temp]
}
}
# initial I: 1 in each age group unless everyone is vaccinated and/or sero positive
I_0 <- rep(0, nage)
I_0[(N - R_0 - V_0) > 1] <- 1
S_0 <- N - I_0 - V_0 - R_0
inits <- c(S=S_0,E=E_0,I=I_0,R=R_0, V=V_0)
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(beta=u, nu=nu, gamma=gamma, C=C, v_e=v_e)
if (strategy == "no vax" | strategy == "kids" | strategy == "elderly"){
t <- seq(0,200,1)
tfinal <- 200
}
else if (strategy == "all"){
t <- seq(0,500,1)
tfinal <- 500
}
else if (strategy == "20+"){
t <- seq(0,600,1)
tfinal <- 600
}
else if (strategy == "adults"){
t <- seq(0,800,1)
tfinal <- 800
}
# t <- seq(0,3200,1)
# tfinal <- 3200
df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
I_tfinal <- sum(df[(tfinal+1),20:28])
if (I_tfinal > 1){
print("Warning: simulation may not have run long enough")
}
df
}
list_all      <- vector(mode = "list")
list_kids     <- vector(mode = "list")
list_adults   <- vector(mode = "list")
list_elderly  <- vector(mode = "list")
list_twentyplus   <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim(C, percent_vax = j, strategy = "all", u = u_var)
list_kids[[paste0(i)]] <- run_sim(C, j, "kids", u_var)
list_adults[[paste0(i)]] <- run_sim(C, j, "adults", u_var)
list_elderly[[paste0(i)]] <- run_sim(C, j, "elderly", u_var)
list_twentyplus[[paste0(i)]] <- run_sim(C, j, "20+", u_var)
}
# * Nontransmission blocking
list_all_ntb      <- vector(mode = "list")
list_kids_ntb      <- vector(mode = "list")
list_adults_ntb    <- vector(mode = "list")
list_elderly_ntb   <- vector(mode = "list")
list_twentyplus_ntb  <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, percent_vax = j, strategy = "all", u = u_var)
list_kids_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "kids", u_var)
list_adults_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "adults", u_var)
list_elderly_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "elderly", u_var)
list_twentyplus_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "20+", u_var)
}
run_sim = function(C, percent_vax, strategy, u = u_constant, v_e = v_e_constant, frac_age = age_demo, npop = pop_total, N = N_i, nage = num_groups, sero = sero_none, sero_testing = FALSE){
# Disease Tranmission
nu    <- 1/3 # incubation period (E -> I), ref: Davies
gamma <- 1/5 # recovery period (I -> R), ref: Davies
# _____________________________________________________________________
# INITIAL CONDITIONS ----
# Vaccine strategies distribute proportionally to
#     all: all age groups
#     kids: age groups < 20
#     adults: age groups 20-49
#     elderly: age groups 60+
#     20+: age groups 20+
# _____________________________________________________________________
E_0    <- rep(0,nage)
R_0    <- N * sero
# specify group to vaccinate according to allocation strategy
if (strategy == "no vax"){
V_0 <- rep(0, nage)
} else {
if (strategy == "all"){
groups <- 1:9
} else if (strategy == "kids"){
groups <- 1:2
} else if (strategy == "adults") {
groups <- 3:5
} else if (strategy == "elderly") {
groups <- 7:9
} else if (strategy == "20+") {
groups <- 3:9
}
people_to_vax <- sum(N[groups])
vax_proportion <- rep(0, nage)
vax_proportion[groups] <- N[groups]/people_to_vax
nvax <- percent_vax*npop
vax_distribution <- nvax*vax_proportion
vax_distribution[vax_distribution > N] <- N[vax_distribution > N]
prob_vaccinated <- vax_distribution/N
if (sero_testing == FALSE){
# account for people who were vaccinated and seropositive
V_0    <- vax_distribution - N*prob_vaccinated*sero
#V_0 <- vax_distribution*v_e # all or nothing vaccine
} else if (sero_testing == TRUE){
# assumes everyone vaccinated was seronegative
V_0    <- vax_distribution
temp <- N - R_0
V_0[V_0 > temp] <- temp[V_0 > temp]
}
}
# initial I: 1 in each age group unless everyone is vaccinated and/or sero positive
I_0 <- rep(0, nage)
I_0[(N - R_0 - V_0) > 1] <- 1
S_0 <- N - I_0 - V_0 - R_0
inits <- c(S=S_0,E=E_0,I=I_0,R=R_0, V=V_0)
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(beta=u, nu=nu, gamma=gamma, C=C, v_e=v_e)
# if (strategy == "no vax" | strategy == "kids" | strategy == "elderly"){
#   t <- seq(0,200,1)
#   tfinal <- 200
# }
# else if (strategy == "all"){
#   t <- seq(0,500,1)
#   tfinal <- 500
# }
# else if (strategy == "20+"){
#   t <- seq(0,600,1)
#   tfinal <- 600
# }
# else if (strategy == "adults"){
#   t <- seq(0,800,1)
#   tfinal <- 800
# }
t <- seq(0,800,1)
tfinal <- 800
df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
I_tfinal <- sum(df[(tfinal+1),20:28])
if (I_tfinal > 1){
print("Warning: simulation may not have run long enough")
}
df
}
list_all      <- vector(mode = "list")
list_kids     <- vector(mode = "list")
list_adults   <- vector(mode = "list")
list_elderly  <- vector(mode = "list")
list_twentyplus   <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim(C, percent_vax = j, strategy = "all", u = u_var)
list_kids[[paste0(i)]] <- run_sim(C, j, "kids", u_var)
list_adults[[paste0(i)]] <- run_sim(C, j, "adults", u_var)
list_elderly[[paste0(i)]] <- run_sim(C, j, "elderly", u_var)
list_twentyplus[[paste0(i)]] <- run_sim(C, j, "20+", u_var)
}
# * Nontransmission blocking
list_all_ntb      <- vector(mode = "list")
list_kids_ntb      <- vector(mode = "list")
list_adults_ntb    <- vector(mode = "list")
list_elderly_ntb   <- vector(mode = "list")
list_twentyplus_ntb  <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, percent_vax = j, strategy = "all", u = u_var)
list_kids_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "kids", u_var)
list_adults_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "adults", u_var)
list_elderly_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "elderly", u_var)
list_twentyplus_ntb[[paste0(i)]] <- run_sim_nontransmissionblocking(C, j, "20+", u_var)
}
# * Plot total cases and deaths ----
outcome <- "cases"
plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
plot_over_vax_avail(outcome, "Non-transmission blocking", list_all_ntb, list_kids_ntb, list_adults_ntb, list_elderly_ntb, list_twentyplus_ntb)
list_all_ntb[[1]]
View(list_all_ntb[[1]])
View(list_all_ntb[[5]])
outcome <- "deaths"
plot_over_vax_avail(outcome, "Non-transmission blocking", list_all_ntb, list_kids_ntb, list_adults_ntb, list_elderly_ntb, list_twentyplus_ntb)
