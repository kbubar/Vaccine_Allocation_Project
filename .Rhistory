out=c(dS,dE,dI,dR,dV)
list(out)
}
run_sim = function(C, percent_vax, strategy, u = u_constant, v_e = v_e_constant,
frac_age = age_demo, npop = pop_total, N = N_i, nage = num_groups,
sero = sero_none, sero_testing = FALSE){
# Disease Tranmission
d_E    <- 1/3 # incubation period (E -> I), ref: Davies
d_I <- 1/5 # recovery period (I -> R), ref: Davies
# _____________________________________________________________________
# INITIAL CONDITIONS ----
# Vaccine strategies distribute proportionally to
#     all: all age groups
#     kids: age groups < 20
#     adults: age groups 20-49
#     elderly: age groups 60+
#     20+: age groups 20+
# _____________________________________________________________________
E_0    <- rep(0,nage)
R_0    <- N * sero
# specify group to vaccinate according to allocation strategy
if (strategy == "no vax"){
V_0 <- rep(0, nage)
} else {
if (strategy == "all"){
groups <- 1:9
} else if (strategy == "kids"){
groups <- 1:2
} else if (strategy == "adults") {
groups <- 3:5
} else if (strategy == "elderly") {
groups <- 7:9
} else if (strategy == "20+") {
groups <- 3:9
}
people_to_vax <- sum(N[groups])
vax_proportion <- rep(0, nage)
vax_proportion[groups] <- N[groups]/people_to_vax
nvax <- percent_vax*npop
vax_distribution <- nvax*vax_proportion
vax_distribution[vax_distribution > N] <- N[vax_distribution > N]
prob_vaccinated <- vax_distribution/N
if (sero_testing == FALSE){
# account for people who were vaccinated and seropositive
#V_0    <- vax_distribution - N*prob_vaccinated*sero
V_0 <- vax_distribution*v_e # all-or-nothing vaccine
} else if (sero_testing == TRUE){
# assumes everyone vaccinated was seronegative
V_0    <- vax_distribution
temp <- N - R_0
V_0[V_0 > temp] <- temp[V_0 > temp]
}
}
# initial I: 1 in each age group unless everyone is vaccinated and/or sero positive
I_0 <- rep(0, nage)
I_0[(N - R_0 - V_0) > 1] <- 1
S_0 <- N - I_0 - V_0 - R_0
inits <- c(S_0,E_0,I_0,R_0,V_0)
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(u=u, d_E=d_E, d_I=d_I, C=C, v_e=v_e)
# t <- seq(0,800,1)
# tfinal <- 800
#
# df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
running = TRUE
t <- c(0:50)
df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
t <- t + 50
while(running == TRUE){
inits <- as.numeric(df[t[1]+1, -(1)])
temp <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
row.names(temp) <- t+1
temp <- temp[-(1),]
df <- rbind(df, temp)
I_tfinal <- sum(df[(t+1),20:28])
if (I_tfinal < 1){
running = FALSE
} else {
t <- t + 50
}
}
names(df) <- c("time", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9",
"E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9",
"I1", "I2", "I3", "I4", "I5", "I6", "I7", "I8", "I9",
"R1", "R2", "R3", "R4", "R5", "R6", "R7", "R8", "R9",
"V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9")
return(df)
}
v_e <- c(.75, .50)
ptm <- proc.time()
for (k in v_e){
v_e_var <- get_v_e(p = k, y0 = k, hinge_age = 50)
list_all      <- vector(mode = "list")
list_kids     <- vector(mode = "list")
list_adults   <- vector(mode = "list")
list_elderly  <- vector(mode = "list")
list_twentyplus   <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim(C, percent_vax = j, strategy = "all", u = u_constant, v_e_var)
list_kids[[paste0(i)]] <- run_sim(C, j, "kids", u_constant, v_e_var)
list_adults[[paste0(i)]] <- run_sim(C, j, "adults", u_constant, v_e_var)
list_elderly[[paste0(i)]] <- run_sim(C, j, "elderly", u_constant, v_e_var)
list_twentyplus[[paste0(i)]] <- run_sim(C, j, "20+", u_constant, v_e_var)
}
print(k)
outcome <- "cases"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
if (k == .75){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 80))
} else if (k == .50){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 50))
}
print(p)
outcome <- "deaths"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
print(p)
}
proc.time() - ptm
v_e <- c(1)
ptm <- proc.time()
for (k in v_e){
v_e_var <- get_v_e(p = k, y0 = k, hinge_age = 50)
list_all      <- vector(mode = "list")
list_kids     <- vector(mode = "list")
list_adults   <- vector(mode = "list")
list_elderly  <- vector(mode = "list")
list_twentyplus   <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim(C, percent_vax = j, strategy = "all", u = u_constant, v_e_var)
list_kids[[paste0(i)]] <- run_sim(C, j, "kids", u_constant, v_e_var)
list_adults[[paste0(i)]] <- run_sim(C, j, "adults", u_constant, v_e_var)
list_elderly[[paste0(i)]] <- run_sim(C, j, "elderly", u_constant, v_e_var)
list_twentyplus[[paste0(i)]] <- run_sim(C, j, "20+", u_constant, v_e_var)
}
print(k)
outcome <- "cases"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
if (k == .75){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 80))
} else if (k == .50){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 50))
}
print(p)
outcome <- "deaths"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
print(p)
}
proc.time() - ptm
v_e <- c(1, .75)
ptm <- proc.time()
for (k in v_e){
v_e_var <- get_v_e(p = k, y0 = k, hinge_age = 50)
list_all      <- vector(mode = "list")
list_kids     <- vector(mode = "list")
list_adults   <- vector(mode = "list")
list_elderly  <- vector(mode = "list")
list_twentyplus   <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim(C, percent_vax = j, strategy = "all", u = u_constant, v_e_var)
list_kids[[paste0(i)]] <- run_sim(C, j, "kids", u_constant, v_e_var)
list_adults[[paste0(i)]] <- run_sim(C, j, "adults", u_constant, v_e_var)
list_elderly[[paste0(i)]] <- run_sim(C, j, "elderly", u_constant, v_e_var)
list_twentyplus[[paste0(i)]] <- run_sim(C, j, "20+", u_constant, v_e_var)
}
print(k)
outcome <- "cases"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
if (k == .75){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 80))
} else if (k == .50){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 50))
}
print(p)
outcome <- "deaths"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
print(p)
}
proc.time() - ptm
run_sim = function(C, percent_vax, strategy, u = u_constant, v_e = v_e_constant,
frac_age = age_demo, npop = pop_total, N = N_i, nage = num_groups,
sero = sero_none, sero_testing = FALSE){
# Disease Tranmission
d_E    <- 1/3 # incubation period (E -> I), ref: Davies
d_I <- 1/5 # recovery period (I -> R), ref: Davies
# _____________________________________________________________________
# INITIAL CONDITIONS ----
# Vaccine strategies distribute proportionally to
#     all: all age groups
#     kids: age groups < 20
#     adults: age groups 20-49
#     elderly: age groups 60+
#     20+: age groups 20+
# _____________________________________________________________________
E_0    <- rep(0,nage)
R_0    <- N * sero
# specify group to vaccinate according to allocation strategy
if (strategy == "no vax"){
V_0 <- rep(0, nage)
} else {
if (strategy == "all"){
groups <- 1:9
} else if (strategy == "kids"){
groups <- 1:2
} else if (strategy == "adults") {
groups <- 3:5
} else if (strategy == "elderly") {
groups <- 7:9
} else if (strategy == "20+") {
groups <- 3:9
}
people_to_vax <- sum(N[groups])
vax_proportion <- rep(0, nage)
vax_proportion[groups] <- N[groups]/people_to_vax
nvax <- percent_vax*npop
vax_distribution <- nvax*vax_proportion
vax_distribution[vax_distribution > N] <- N[vax_distribution > N]
prob_vaccinated <- vax_distribution/N
if (sero_testing == FALSE){
# account for people who were vaccinated and seropositive
#V_0    <- vax_distribution - N*prob_vaccinated*sero
V_0 <- vax_distribution*v_e # all-or-nothing vaccine
} else if (sero_testing == TRUE){
# assumes everyone vaccinated was seronegative
V_0    <- vax_distribution
temp <- N - R_0
V_0[V_0 > temp] <- temp[V_0 > temp]
}
}
# initial I: 1 in each age group unless everyone is vaccinated and/or sero positive
I_0 <- rep(0, nage)
I_0[(N - R_0 - V_0) > 1] <- 1
S_0 <- N - I_0 - V_0 - R_0
inits <- c(S_0,E_0,I_0,R_0,V_0)
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(u=u, d_E=d_E, d_I=d_I, C=C, v_e=v_e)
# t <- seq(0,800,1)
# tfinal <- 800
#
# df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
running = TRUE
t <- c(0:50)
df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
t <- t + 50
while(running == TRUE){
inits <- as.numeric(df[t[1]+1, -(1)])
temp <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
row.names(temp) <- t+1
temp <- temp[-(1),]
df <- rbind(df, temp)
I_tfinal <- sum(df[(t+1),20:28])
if (I_tfinal < 1){
running = FALSE
} else {
t <- t + 50
}
}
names(df) <- c("time", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9",
"E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9",
"I1", "I2", "I3", "I4", "I5", "I6", "I7", "I8", "I9",
"R1", "R2", "R3", "R4", "R5", "R6", "R7", "R8", "R9",
"V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9")
return(df)
}
calculate_derivatives=function(t, x, parameters){
# the parameters in the parameters list are:
#    the probability of transmission on contact, beta
#    the incubation period, nu
#    the recovery period, gamma
#    the contact matrix, C, that is the # contacts per day among age groups
#
# Note that x is a vector of length (#model compartment types)*(#age classes)
# Thus, S, E, I and R are vectors, all of length num_groups
ncompartment <- 5
num_groups <- length(x)/ncompartment
S    <- as.matrix(x[1:num_groups])
E    <- as.matrix(x[(num_groups+1):(2*num_groups)])
I    <- as.matrix(x[(2*num_groups+1):(3*num_groups)])
R    <- as.matrix(x[(3*num_groups+1):(4*num_groups)])
V    <- as.matrix(x[(4*num_groups+1):(5*num_groups)])
I[I<0] = 0
u <- parameters$u
C <- parameters$C
d_E <- parameters$d_E
d_I <- parameters$d_I
v_e <- parameters$v_e
N = S+E+I+R+V
dS = -as.matrix(S*u)*(as.matrix(C)%*%as.matrix(I/N))
dV = 0*(1-v_e)*(-as.matrix(V*u))*(as.matrix(C)%*%as.matrix(I/N)) # multiply by 0 if all-or-nothing
dE = -dS - dV - d_E*as.matrix(E)
dI = d_E*as.matrix(E) - d_I*as.matrix(I)
dR = +d_I*as.matrix(I)
out=c(dS,dE,dI,dR,dV)
list(out)
}
v_e <- c(1, .75)
ptm <- proc.time()
for (k in v_e){
v_e_var <- get_v_e(p = k, y0 = k, hinge_age = 50)
list_all      <- vector(mode = "list")
list_kids     <- vector(mode = "list")
list_adults   <- vector(mode = "list")
list_elderly  <- vector(mode = "list")
list_twentyplus   <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim(C, percent_vax = j, strategy = "all", u = u_constant, v_e_var)
list_kids[[paste0(i)]] <- run_sim(C, j, "kids", u_constant, v_e_var)
list_adults[[paste0(i)]] <- run_sim(C, j, "adults", u_constant, v_e_var)
list_elderly[[paste0(i)]] <- run_sim(C, j, "elderly", u_constant, v_e_var)
list_twentyplus[[paste0(i)]] <- run_sim(C, j, "20+", u_constant, v_e_var)
}
print(k)
outcome <- "cases"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
if (k == .75){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 80))
} else if (k == .50){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 50))
}
print(p)
outcome <- "deaths"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
print(p)
}
proc.time() - ptm
v_e <- c(.75, 0.5)
ptm <- proc.time()
for (k in v_e){
v_e_var <- get_v_e(p = k, y0 = k, hinge_age = 50)
list_all      <- vector(mode = "list")
list_kids     <- vector(mode = "list")
list_adults   <- vector(mode = "list")
list_elderly  <- vector(mode = "list")
list_twentyplus   <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim(C, percent_vax = j, strategy = "all", u = u_constant, v_e_var)
list_kids[[paste0(i)]] <- run_sim(C, j, "kids", u_constant, v_e_var)
list_adults[[paste0(i)]] <- run_sim(C, j, "adults", u_constant, v_e_var)
list_elderly[[paste0(i)]] <- run_sim(C, j, "elderly", u_constant, v_e_var)
list_twentyplus[[paste0(i)]] <- run_sim(C, j, "20+", u_constant, v_e_var)
}
print(k)
outcome <- "cases"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
if (k == .75){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 100))
} else if (k == .50){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 100))
}
print(p)
outcome <- "deaths"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
print(p)
}
proc.time() - ptm
calculate_derivatives=function(t, x, parameters){
# the parameters in the parameters list are:
#    the probability of transmission on contact, beta
#    the incubation period, nu
#    the recovery period, gamma
#    the contact matrix, C, that is the # contacts per day among age groups
#
# Note that x is a vector of length (#model compartment types)*(#age classes)
# Thus, S, E, I and R are vectors, all of length num_groups
ncompartment <- 5
num_groups <- length(x)/ncompartment
S    <- as.matrix(x[1:num_groups])
E    <- as.matrix(x[(num_groups+1):(2*num_groups)])
I    <- as.matrix(x[(2*num_groups+1):(3*num_groups)])
R    <- as.matrix(x[(3*num_groups+1):(4*num_groups)])
V    <- as.matrix(x[(4*num_groups+1):(5*num_groups)])
I[I<0] = 0
u <- parameters$u
C <- parameters$C
d_E <- parameters$d_E
d_I <- parameters$d_I
v_e <- parameters$v_e
N = S+E+I+R+V
dS = -as.matrix(S*u)*(as.matrix(C)%*%as.matrix(I/N))
dV = (1-v_e)*(-as.matrix(V*u))*(as.matrix(C)%*%as.matrix(I/N)) # multiply by 0 if all-or-nothing
dE = -dS - dV - d_E*as.matrix(E)
dI = d_E*as.matrix(E) - d_I*as.matrix(I)
dR = +d_I*as.matrix(I)
out=c(dS,dE,dI,dR,dV)
list(out)
}
run_sim = function(C, percent_vax, strategy, u = u_constant, v_e = v_e_constant,
frac_age = age_demo, npop = pop_total, N = N_i, nage = num_groups,
sero = sero_none, sero_testing = FALSE){
# Disease Tranmission
d_E    <- 1/3 # incubation period (E -> I), ref: Davies
d_I <- 1/5 # recovery period (I -> R), ref: Davies
# _____________________________________________________________________
# INITIAL CONDITIONS ----
# Vaccine strategies distribute proportionally to
#     all: all age groups
#     kids: age groups < 20
#     adults: age groups 20-49
#     elderly: age groups 60+
#     20+: age groups 20+
# _____________________________________________________________________
E_0    <- rep(0,nage)
R_0    <- N * sero
# specify group to vaccinate according to allocation strategy
if (strategy == "no vax"){
V_0 <- rep(0, nage)
} else {
if (strategy == "all"){
groups <- 1:9
} else if (strategy == "kids"){
groups <- 1:2
} else if (strategy == "adults") {
groups <- 3:5
} else if (strategy == "elderly") {
groups <- 7:9
} else if (strategy == "20+") {
groups <- 3:9
}
people_to_vax <- sum(N[groups])
vax_proportion <- rep(0, nage)
vax_proportion[groups] <- N[groups]/people_to_vax
nvax <- percent_vax*npop
vax_distribution <- nvax*vax_proportion
vax_distribution[vax_distribution > N] <- N[vax_distribution > N]
prob_vaccinated <- vax_distribution/N
if (sero_testing == FALSE){
# account for people who were vaccinated and seropositive
V_0    <- vax_distribution - N*prob_vaccinated*sero
#V_0 <- vax_distribution*v_e # all-or-nothing vaccine
} else if (sero_testing == TRUE){
# assumes everyone vaccinated was seronegative
V_0    <- vax_distribution
temp <- N - R_0
V_0[V_0 > temp] <- temp[V_0 > temp]
}
}
# initial I: 1 in each age group unless everyone is vaccinated and/or sero positive
I_0 <- rep(0, nage)
I_0[(N - R_0 - V_0) > 1] <- 1
S_0 <- N - I_0 - V_0 - R_0
inits <- c(S_0,E_0,I_0,R_0,V_0)
# _____________________________________________________________________
# NUMERICALLY SOLVE ----
# _____________________________________________________________________
parameters = list(u=u, d_E=d_E, d_I=d_I, C=C, v_e=v_e)
# t <- seq(0,800,1)
# tfinal <- 800
#
# df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
running = TRUE
t <- c(0:50)
df <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
t <- t + 50
while(running == TRUE){
inits <- as.numeric(df[t[1]+1, -(1)])
temp <- as.data.frame(lsoda(inits, t, calculate_derivatives, parameters))
row.names(temp) <- t+1
temp <- temp[-(1),]
df <- rbind(df, temp)
I_tfinal <- sum(df[(t+1),20:28])
if (I_tfinal < 1){
running = FALSE
} else {
t <- t + 50
}
}
names(df) <- c("time", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9",
"E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9",
"I1", "I2", "I3", "I4", "I5", "I6", "I7", "I8", "I9",
"R1", "R2", "R3", "R4", "R5", "R6", "R7", "R8", "R9",
"V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9")
return(df)
}
v_e <- c(.75, 0.5)
ptm <- proc.time()
for (k in v_e){
v_e_var <- get_v_e(p = k, y0 = k, hinge_age = 50)
list_all      <- vector(mode = "list")
list_kids     <- vector(mode = "list")
list_adults   <- vector(mode = "list")
list_elderly  <- vector(mode = "list")
list_twentyplus   <- vector(mode = "list")
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim(C, percent_vax = j, strategy = "all", u = u_constant, v_e_var)
list_kids[[paste0(i)]] <- run_sim(C, j, "kids", u_constant, v_e_var)
list_adults[[paste0(i)]] <- run_sim(C, j, "adults", u_constant, v_e_var)
list_elderly[[paste0(i)]] <- run_sim(C, j, "elderly", u_constant, v_e_var)
list_twentyplus[[paste0(i)]] <- run_sim(C, j, "20+", u_constant, v_e_var)
}
print(k)
outcome <- "cases"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
if (k == .75){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 100))
} else if (k == .50){
p <- p + scale_y_continuous(expand = c(0,0), limit = c(0, 100))
}
print(p)
outcome <- "deaths"
p <- plot_over_vax_avail(outcome, "None", list_all, list_kids, list_adults, list_elderly, list_twentyplus)
print(p)
}
proc.time() - ptm
