Diagonal(3)
diag(x = 1, 3, 3)
diag(u_i, 3, 3)
d_p <- 2.1    # mean duration of preclinical infectiousness (days)
d_c <- 2.9    # mean duration of clinical infectiousness (days)
d_s <- 5      # mean duration of subclinical infectiousness (days)
f <- 0.5      # relative infectiousness of subclinical cases
u_i <- 0.078  # susceptibility for age group i (TODO: update so it's a fn of age)
y_i <- 0.5    # probability of clinical infection by age group i (TODO: update so it's a fn of age)
Du <- diag(u_i, rows, rows)
Dy <- diag(y_i, rows, rows)
# From Eames (Davies ref 19)
C <- rbind(c(0.1, 0.3, 6.6, 2.1), c(0.8, 3.8, 14.8, 1), c(1.4, 27.7, 11.2, 1), c(4, 1.8, 7.8, 0.1))
print(C)
dim(C)
dim(C)[1]
rows <- dim(C)[1]
Du <- diag(u_i, rows, rows)
Dy <- diag(y_i, rows, rows)
# Ex contact matrix From Eames (Davies ref 19)
# Age groups: 0-4, 5-18, 19-64, 65+)
C <- rbind(c(0.1, 0.3, 6.6, 2.1), c(0.8, 3.8, 14.8, 1), c(1.4, 27.7, 11.2, 1), c(4, 1.8, 7.8, 0.1))
View(Du)
View(C)
NGM <- (d_p + d_c - f*d_s)*Du*C*Dy + f*d_s*Du*C
View(NGM)
Du*C
Du.*C
Du .* C
Du *.* C
Du .*. C
Du %*% C
X <- rbind(c(1,2), c(3, 4))
Y <- rbind(c(4, 3), c(2, 1))
X %*% Y
NGM <- (d_p + d_c - f*d_s)*Du %*% C %*% Dy + (f*d_s)*Du %*% C
View(NGM)
#### Example without immunity ####
I_0 <- cbind(c(0, 5, 5, 1))
I_0
#### Example without immunity ####
I_0 <- cbind(c(0, 5, 5, 1))
labels <- c("65+", "19-64", "5-18", "0-4")
row.names(I_0) <- labels
View(I_0)
I_1 <- M*I_0
I_1 <- NGM*I_0
I_1 <- NGM %*% I_0
View(I_1)
# Ex contact matrix From Eames (Davies ref 19)
# Age groups: 0-4, 5-18, 19-64, 65+)
C <- rbind(c(0.1, 0.2, 1.6, 0.7), c(0.4, 0.8, 3.3, 0.5), c(0.5, 4.7, 3.3, 0.4), c(1.9, 1.4, 3.7, 0.1))
NGM <- (d_p + d_c - f*d_s)*Du %*% C %*% Dy + (f*d_s)*Du %*% C
#### Example ####
I_0 <- cbind(c(0, 5, 5, 1))
labels <- c("65+", "19-64", "5-18", "0-4")
row.names(I_0) <- labels
# without immunity
I_1 <- NGM %*% I_0
View(I_1)
0.15*.1
.85*.1
60*0.015
0.9*0.15
0.9*0.85
0.765+0.135+0.015+0.085
60*0.085
citation()
version()
lambda <- 0:0.1:2
lambda <- 0:0.01:2
lambda <- 0:2:0.1
?rexp
qchisq(p = 1 - alpha, df = 2*n)
alpha <- 0.05
qchisq(p = 1 - alpha, df = 2*n)
n <- 10
lambda_0 <- 1
alpha <- 0.05
qchisq(p = 1 - alpha, df = 2*n)
power_xbar <- function(lambda){
count <- 1
for (i in 1:num_samples){
x <- rexp(n, rate = lambda)
xbar <- mean(x)
chi <- qchisq(p = 1 - alpha, df = 2*n)
if (2*lambda_0*n*xbar < chi){
count <- count + 1
}
}
}
num_samples <- 100
lambda <- 1
power_xbar <- function(lambda){
count <- 1
for (i in 1:num_samples){
x <- rexp(n, rate = lambda)
xbar <- mean(x)
chi <- qchisq(p = 1 - alpha, df = 2*n)
if (2*lambda_0*n*xbar < chi){
count <- count + 1
}
}
return (count/num_samples)
}
num_samples <- 100
power_xbar(1)
power_xbar(2)
num_samples <- 10000
power_xbar <- function(lambda){
count <- 1
for (i in 1:num_samples){
x <- rexp(n, rate = lambda)
xbar <- mean(x)
chi <- qchisq(p = alpha, df = 2*n)
if (2*lambda_0*n*xbar < chi){
count <- count + 1
}
}
return (count/num_samples)
}
power_xbar(2)
power_xbar(10)
power_xbar(100)
lambda <- linspace(0, 2, 100)
lambda <- linspace(0, 2, 100)
lambda <- seq(0,10,length.out = 100)
power_xmin <- 1 - (1-alpha)^(lambda/lambda_0)
num_samples <- 10000
power_xbar <- function(lambda){
count <- 1
for (i in 1:num_samples){
x <- rexp(n, rate = lambda)
xbar <- mean(x)
chi <- qchisq(p = alpha, df = 2*n)
if (2*lambda_0*n*xbar < chi){
count <- count + 1
}
}
return (count/num_samples)
}
power_xbar(lambda)
lambda <- seq(0.1,10,length.out = 100)
power_xmin <- 1 - (1-alpha)^(lambda/lambda_0)
num_samples <- 10000
power_xbar <- function(lambda){
count <- 1
for (i in 1:num_samples){
x <- rexp(n, rate = lambda)
xbar <- mean(x)
chi <- qchisq(p = alpha, df = 2*n)
if (2*lambda_0*n*xbar < chi){
count <- count + 1
}
}
return (count/num_samples)
}
power_xbar(lambda)
plot(lambda, power_xbar(lambda))
power_vals <- vector(length = length(lambda))
for (i in lambda){
power_vals[i] <- power_xbar(lambda[i])
}
power_vals[i] <- power_xbar(lambda[i])
power_vals <- vector(length = length(lambda))
for (i in 1:length(lambda)){
power_vals[i] <- power_xbar(lambda[i])
}
plot(lambda, power_vals)
plot(lambda, power_vals)
plot(lambda, power_vals, pch = 19)
points(lambda, power_xmin, pch = 19, col = "green")
setwd("~/Vaccine Strategy/Vaccine_Allocation_Project")
# _____________________________________________________________________
# IMPORT ----
# _____________________________________________________________________
source("run_sim.R")
source("helper_functions.R")
country    <- "USA"
source("setup.R")
this_scale <- scale_u_for_R0(u_var, C, 1.5508) # so that realized R is 1.5
print(compute_R_with_sero(u_var, C/this_scale, sero_CT))
ptm <- proc.time()
list_all <- list_kids <- list_adults <- list_elderly <- list_twentyplus <- vector(mode = "list")
list_all_var <- list_kids_var <- list_adults_var <- list_elderly_var <- list_twentyplus_var <- vector(mode = "list")
num_perday <- 0.002
this_C <- C/this_scale
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim_new(this_C, j, "all", num_perday, v_e_type, this_v_e, u = u_var, sero = sero_CT)
list_kids[[paste0(i)]] <- run_sim_new(this_C, j, "kids", num_perday, v_e_type, this_v_e, u = u_var, sero = sero_CT)
list_adults[[paste0(i)]] <- run_sim_new(this_C, j, "adults", num_perday, v_e_type, this_v_e, u = u_var,sero = sero_CT)
list_elderly[[paste0(i)]] <- run_sim_new(this_C, j, "elderly", num_perday, v_e_type, this_v_e, u = u_var,sero = sero_CT)
list_twentyplus[[paste0(i)]] <- run_sim_new(this_C, j, "twentyplus", num_perday, v_e_type, this_v_e, u = u_var, sero = sero_CT)
list_all_var[[paste0(i)]] <- run_sim_new(this_C, j, "all", num_perday, v_e_type, this_v_e, u = u_var,sero = sero_CT, sp = this_sp, se = this_se)
list_kids_var[[paste0(i)]] <- run_sim_new(this_C, j, "kids", num_perday, v_e_type, this_v_e, u = u_var,sero = sero_CT, sp = this_sp, se = this_se)
list_adults_var[[paste0(i)]] <- run_sim_new(this_C, j, "adults", num_perday, v_e_type, this_v_e, u = u_var,sero = sero_CT, sp = this_sp, se = this_se)
list_elderly_var[[paste0(i)]] <- run_sim_new(this_C, j, "elderly", num_perday, v_e_type, this_v_e, u = u_var, sero = sero_CT, sp = this_sp, se = this_se)
list_twentyplus_var[[paste0(i)]] <- run_sim_new(this_C, j, "twentyplus", num_perday, v_e_type, this_v_e, u = u_var,sero = sero_CT, sp = this_sp, se = this_se)
}
proc.time() - ptm
p_mort <- plot_over_vax_avail("deaths", TRUE)
p_infect <- plot_over_vax_avail("cases", TRUE) +
theme(axis.title.x = element_blank())
p_yll <- plot_over_vax_avail("YLL", TRUE)+
theme(axis.title.x = element_blank())
panel <- ggarrange(p_infect, p_mort, p_yll,
nrow = 1,
labels = c('A', 'B', 'C'),
label.args = list(gp = grid::gpar(fontsize=12, fontface = "bold"),
hjust=0, vjust = 1),
padding = unit(0.5, "line"))
leg_sero <- sero_legend()
lay <- rbind(c(1, 3),
c(2, 3),
c(NA,3))
# export as pdf 9.5x2
grid.arrange(leg_sero, leg_col, panel,
layout_matrix = lay,
widths = c(0.9, 8.6),
heights = c(.9, .9, .2))
panel <- ggarrange(p_infect, p_mort, p_yll,
nrow = 1,
labels = c('A', 'B', 'C'),
label.args = list(gp = grid::gpar(fontsize=12, fontface = "bold"),
hjust=0, vjust = 1),
padding = unit(0.5, "line"))
