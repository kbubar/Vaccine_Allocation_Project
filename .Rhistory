Diagonal(3)
diag(x = 1, 3, 3)
diag(u_i, 3, 3)
d_p <- 2.1    # mean duration of preclinical infectiousness (days)
d_c <- 2.9    # mean duration of clinical infectiousness (days)
d_s <- 5      # mean duration of subclinical infectiousness (days)
f <- 0.5      # relative infectiousness of subclinical cases
u_i <- 0.078  # susceptibility for age group i (TODO: update so it's a fn of age)
y_i <- 0.5    # probability of clinical infection by age group i (TODO: update so it's a fn of age)
Du <- diag(u_i, rows, rows)
Dy <- diag(y_i, rows, rows)
# From Eames (Davies ref 19)
C <- rbind(c(0.1, 0.3, 6.6, 2.1), c(0.8, 3.8, 14.8, 1), c(1.4, 27.7, 11.2, 1), c(4, 1.8, 7.8, 0.1))
print(C)
dim(C)
dim(C)[1]
rows <- dim(C)[1]
Du <- diag(u_i, rows, rows)
Dy <- diag(y_i, rows, rows)
# Ex contact matrix From Eames (Davies ref 19)
# Age groups: 0-4, 5-18, 19-64, 65+)
C <- rbind(c(0.1, 0.3, 6.6, 2.1), c(0.8, 3.8, 14.8, 1), c(1.4, 27.7, 11.2, 1), c(4, 1.8, 7.8, 0.1))
View(Du)
View(C)
NGM <- (d_p + d_c - f*d_s)*Du*C*Dy + f*d_s*Du*C
View(NGM)
Du*C
Du.*C
Du .* C
Du *.* C
Du .*. C
Du %*% C
X <- rbind(c(1,2), c(3, 4))
Y <- rbind(c(4, 3), c(2, 1))
X %*% Y
NGM <- (d_p + d_c - f*d_s)*Du %*% C %*% Dy + (f*d_s)*Du %*% C
View(NGM)
#### Example without immunity ####
I_0 <- cbind(c(0, 5, 5, 1))
I_0
#### Example without immunity ####
I_0 <- cbind(c(0, 5, 5, 1))
labels <- c("65+", "19-64", "5-18", "0-4")
row.names(I_0) <- labels
View(I_0)
I_1 <- M*I_0
I_1 <- NGM*I_0
I_1 <- NGM %*% I_0
View(I_1)
# Ex contact matrix From Eames (Davies ref 19)
# Age groups: 0-4, 5-18, 19-64, 65+)
C <- rbind(c(0.1, 0.2, 1.6, 0.7), c(0.4, 0.8, 3.3, 0.5), c(0.5, 4.7, 3.3, 0.4), c(1.9, 1.4, 3.7, 0.1))
NGM <- (d_p + d_c - f*d_s)*Du %*% C %*% Dy + (f*d_s)*Du %*% C
#### Example ####
I_0 <- cbind(c(0, 5, 5, 1))
labels <- c("65+", "19-64", "5-18", "0-4")
row.names(I_0) <- labels
# without immunity
I_1 <- NGM %*% I_0
View(I_1)
setwd("~/Vaccine Strategy")
library(tidyverse)
library(deSolve) # ode solver
library(xlsx)
library(gridExtra)
calculate_derivatives=function(t, x, parameters){
# the parameters in the parameters list are:
#    the probability of transmission on contact, beta
#    the incubation period, nu
#    the recovery period, gamma
#    the contact matrix, C, that is the # contacts per day among age groups
#
# Note that x is a vector of length (#model compartment types)*(#age classes)
# Thus, S, E, I and R are vectors, all of length nage
ncompartment <- 4
nage <- length(x)/ncompartment
S    <- as.matrix(x[1:nage])
E    <- as.matrix(x[(nage+1):(2*nage)])
I    <- as.matrix(x[(2*nage+1):(3*nage)])
R    <- as.matrix(x[(3*nage+1):(4*nage)])
I[I<0] = 0
with(as.list(parameters),{
# note that because S, I and R are all vectors of length nage, so will N,
# and dS, dI, and dR
N = S+E+I+R
dS = -as.matrix(S*beta)*(as.matrix(C)%*%as.matrix(I/N))
dE = -dS - nu*as.matrix(E)
dI = nu*as.matrix(E) - gamma*as.matrix(I)
dR = +gamma*as.matrix(I)
out=c(dS,dE,dI,dR)
list(out)
})
}
plot_all_ages_overtime=function(df, compartment){
# INPUTS:
# df: simulation to plot
# compartment: character of compartment to plot i.e. "I", "R"
#
# OUTPUT:
# p: ggplot object of plot
# make new df for plotting
col_to_gather <- vector(mode="character", length=nage)
for (i in 1:9) {col_to_gather[i] <- paste0(compartment,i)}
new_df <- df %>%
select(time, col_to_gather) %>%
gather(key = "age_group", value = "num", -time)
# Add col for percent infected & recovered
new_df$percent <- new_df$num
for (i in 1:length(new_df$num)){
if (new_df$age_group[i] == col_to_gather[1]) {new_df$percent[i] <- new_df$percent[i]/N[1]}
else if (new_df$age_group[i] == col_to_gather[2]) {new_df$percent[i] <- new_df$percent[i]/N[2]}
else if (new_df$age_group[i] == col_to_gather[3]) {new_df$percent[i] <- new_df$percent[i]/N[3]}
else if (new_df$age_group[i] == col_to_gather[4]) {new_df$percent[i] <- new_df$percent[i]/N[4]}
else if (new_df$age_group[i] == col_to_gather[5]) {new_df$percent[i] <- new_df$percent[i]/N[5]}
else if (new_df$age_group[i] == col_to_gather[6]) {new_df$percent[i] <- new_df$percent[i]/N[6]}
else if (new_df$age_group[i] == col_to_gather[7]) {new_df$percent[i] <- new_df$percent[i]/N[7]}
else if (new_df$age_group[i] == col_to_gather[8]) {new_df$percent[i] <- new_df$percent[i]/N[8]}
}
# Plot
theme_set(theme_minimal(base_size = 15))
p <- ggplot(new_df, aes(x = time, y = percent)) +
geom_line(aes(color = age_group), size = 2) +
xlab("Time") +
scale_color_brewer(palette = "Spectral", name = "Age Group",
labels =  c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+"))
if (compartment == "I") {
p <- p + ylab("Percent Infected") + ylim(0,0.4)
} else if (compartment == "R") {
p <- p + ylab("Percent Recovered") + ylim(0,1)
}
}
plot_one_age_overtime = function(col_name, age_group_num) {
# INPUTS:
# group: charcater of col of interest from df. Specifies age group and compartment of interest
#
# OUTPUT:
# p: ggplot object plotting all strats for one age group & one compartment
nstrat <- 3
new_df <- data.frame(matrix(ncol = nstrat+1, nrow = dim(df_novax)[1]))
colnames(new_df) <- c("time", "no_vax", "everyone", "kids")
new_df$time <- df_novax$time
# Make sure col of interest are stored as vectors
new_df$no_vax <- unlist(as.data.frame(df_novax)[col_name]/N[age_group_num])
new_df$everyone <- unlist(as.data.frame(df_prop)[col_name]/N[age_group_num])
new_df$kids <- unlist(as.data.frame(df_propkids)[col_name]/N[age_group_num])
new_df <- new_df %>%
select(time, no_vax, everyone, kids) %>%
gather(key = "strat", value = "percent", -time)
theme_set(theme_minimal(base_size = 15))
p <- ggplot(new_df, aes(x = time, y = percent)) +
geom_line(aes(color = strat), size = 2) +
xlab("Time") +
scale_color_brewer(palette = "Dark2", name = "Scenario",
labels =  c("Everyone", "Just Kids", "No vaccines"))
if (substr(col_name, 1, 1) == "I"){
p <- p + ylab("Percent Infected") + ylim(0, 0.4)
}
}
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
# _____________________________________________________________________
# SETUP ----
# _____________________________________________________________________
# Demographics
C <- readRDS("C_USA_bytens.RData")
setwd("~/Vaccine Strategy/Vaccine Allocation Project")
setwd("~/Vaccine Strategy/Vaccine_Allocation_Project")
library(tidyverse)
library(deSolve) # ode solver
library(xlsx)
library(gridExtra)
calculate_derivatives=function(t, x, parameters){
# the parameters in the parameters list are:
#    the probability of transmission on contact, beta
#    the incubation period, nu
#    the recovery period, gamma
#    the contact matrix, C, that is the # contacts per day among age groups
#
# Note that x is a vector of length (#model compartment types)*(#age classes)
# Thus, S, E, I and R are vectors, all of length nage
ncompartment <- 4
nage <- length(x)/ncompartment
S    <- as.matrix(x[1:nage])
E    <- as.matrix(x[(nage+1):(2*nage)])
I    <- as.matrix(x[(2*nage+1):(3*nage)])
R    <- as.matrix(x[(3*nage+1):(4*nage)])
I[I<0] = 0
with(as.list(parameters),{
# note that because S, I and R are all vectors of length nage, so will N,
# and dS, dI, and dR
N = S+E+I+R
dS = -as.matrix(S*beta)*(as.matrix(C)%*%as.matrix(I/N))
dE = -dS - nu*as.matrix(E)
dI = nu*as.matrix(E) - gamma*as.matrix(I)
dR = +gamma*as.matrix(I)
out=c(dS,dE,dI,dR)
list(out)
})
}
plot_all_ages_overtime=function(df, compartment){
# INPUTS:
# df: simulation to plot
# compartment: character of compartment to plot i.e. "I", "R"
#
# OUTPUT:
# p: ggplot object of plot
# make new df for plotting
col_to_gather <- vector(mode="character", length=nage)
for (i in 1:9) {col_to_gather[i] <- paste0(compartment,i)}
new_df <- df %>%
select(time, col_to_gather) %>%
gather(key = "age_group", value = "num", -time)
# Add col for percent infected & recovered
new_df$percent <- new_df$num
for (i in 1:length(new_df$num)){
if (new_df$age_group[i] == col_to_gather[1]) {new_df$percent[i] <- new_df$percent[i]/N[1]}
else if (new_df$age_group[i] == col_to_gather[2]) {new_df$percent[i] <- new_df$percent[i]/N[2]}
else if (new_df$age_group[i] == col_to_gather[3]) {new_df$percent[i] <- new_df$percent[i]/N[3]}
else if (new_df$age_group[i] == col_to_gather[4]) {new_df$percent[i] <- new_df$percent[i]/N[4]}
else if (new_df$age_group[i] == col_to_gather[5]) {new_df$percent[i] <- new_df$percent[i]/N[5]}
else if (new_df$age_group[i] == col_to_gather[6]) {new_df$percent[i] <- new_df$percent[i]/N[6]}
else if (new_df$age_group[i] == col_to_gather[7]) {new_df$percent[i] <- new_df$percent[i]/N[7]}
else if (new_df$age_group[i] == col_to_gather[8]) {new_df$percent[i] <- new_df$percent[i]/N[8]}
}
# Plot
theme_set(theme_minimal(base_size = 15))
p <- ggplot(new_df, aes(x = time, y = percent)) +
geom_line(aes(color = age_group), size = 2) +
xlab("Time") +
scale_color_brewer(palette = "Spectral", name = "Age Group",
labels =  c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+"))
if (compartment == "I") {
p <- p + ylab("Percent Infected") + ylim(0,0.4)
} else if (compartment == "R") {
p <- p + ylab("Percent Recovered") + ylim(0,1)
}
}
plot_one_age_overtime = function(col_name, age_group_num) {
# INPUTS:
# group: charcater of col of interest from df. Specifies age group and compartment of interest
#
# OUTPUT:
# p: ggplot object plotting all strats for one age group & one compartment
nstrat <- 3
new_df <- data.frame(matrix(ncol = nstrat+1, nrow = dim(df_novax)[1]))
colnames(new_df) <- c("time", "no_vax", "everyone", "kids")
new_df$time <- df_novax$time
# Make sure col of interest are stored as vectors
new_df$no_vax <- unlist(as.data.frame(df_novax)[col_name]/N[age_group_num])
new_df$everyone <- unlist(as.data.frame(df_prop)[col_name]/N[age_group_num])
new_df$kids <- unlist(as.data.frame(df_propkids)[col_name]/N[age_group_num])
new_df <- new_df %>%
select(time, no_vax, everyone, kids) %>%
gather(key = "strat", value = "percent", -time)
theme_set(theme_minimal(base_size = 15))
p <- ggplot(new_df, aes(x = time, y = percent)) +
geom_line(aes(color = strat), size = 2) +
xlab("Time") +
scale_color_brewer(palette = "Dark2", name = "Scenario",
labels =  c("Everyone", "Just Kids", "No vaccines"))
if (substr(col_name, 1, 1) == "I"){
p <- p + ylab("Percent Infected") + ylim(0, 0.4)
}
}
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
# _____________________________________________________________________
# SETUP ----
# _____________________________________________________________________
# Demographics
C <- readRDS("C_USA_bytens.RData")
View(C)
frac_age <- read.xlsx("USA_demographics.xlsx", "data_bytens", header = FALSE)
colnames(frac_age) <- c("age_bins", "percent")
frac_age <- read.xlsx("USA_demographics.xlsx", "data_bytens", header = FALSE)
colnames(frac_age) <- c("age_bins", "percent")
barplot(frac_age$percent, xlab = ("Age Groups"), ylab = "Percent",
names.arg = c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+"))
df = subset(frac_age, select = -c(1) )
View(df)
frac_age <- read.xlsx("USA_demographics.xlsx", "data_bytens", header = FALSE, cols = 2)
View(frac_age)
rm(list = ls())
frac_age <- read.xlsx("USA_demographics.xlsx", "data_bytens", header = FALSE, cols = 2)
View(frac_age)
frac_age <- read.xlsx("USA_demographics.xlsx", "data_bytens", header = FALSE, row.names = TRUE)
View(frac_age)
colnames(frac_age) <- c("percent")
View(frac_age)
as.vector(frac_age)
frac_age <- as.vector(read.xlsx("USA_demographics.xlsx", "data_bytens", header = FALSE, row.names = TRUE))
frac_age <- as.vector(frac_age[1])
View(frac_age)
frac_age[1]
frac_age[[1]
]
frac_age <- as.vector(frac_age[[1]])
barplot(frac_age, xlab = ("Age Groups"), ylab = "Percent",
names.arg = c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+"))
